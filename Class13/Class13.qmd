---
title: "Class 13: RNASeq Analysis with DESeq2"
author: "Hailey Wheeler (A13312713)"
format: pdf
---

```{r}
library(BiocManager)
library(DESeq2)
```

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <- read.csv("airway_metadata.csv")
head(counts)
head(metadata)
```

How many genes are in this data set? 38694 genes 
```{r}
dim(counts)
```

How many 'control' cell lines do we have? 4
```{r}
sum(metadata$dex == "control")
```

I want to compare the control to the treated columns. To do this I will:
1. Identify and extract the 'control' columns
2. Calculate the mean value per gene for all these 'control' columns
3. Do the same for treated 
4. Compare 'control.mean' to 'treated.mean' 

Q3: How would you make the above code in either approach more robust? Is there a function that could help here?

Method 1
```{r}
control.inds <- metadata$dex == "control"
control.mean <- rowMeans(counts[,control.inds])
head(control.mean)
```

Method 2
```{r}
## Calculate mean counts per gene
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

Method 3
```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[ , treated$id]
treated.mean <- rowSums(treated.counts)/4
head(treated.mean)
```

## Compare the two means 
```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot?
geom_point()

```{r}
library(ggplot2)

ggplot(meancounts, aes(control.mean, treated.mean)) +
  labs(x="Control", y="Treated") +
  geom_point(alpha=0.5)
```

Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
library(ggplot2)

ggplot(meancounts, aes(control.mean, treated.mean)) +
  labs(x="Control", y="Treated") +
  scale_x_continuous(trans="log2") +
  scale_y_continuous(trans="log2") +
  geom_point(alpha=0.5)
```

```{r}
plot(meancounts, log="xy")
```

## Compare the two means 
```{r}
## Treated/Control
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind argument included in the which() function will call row and column positions where there are TRUE values (aka, which rows/genes and column/samples are 0) -> Calling unique() will make sure we don't call two of the same samples in case they have zeros in both rows. 

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind = TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
dim(mycounts)
head(mycounts)
```

Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 250.

```{r}
up.ind <- mycounts$log2fc > 2
sum(up.ind == TRUE)
```

Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 367.

```{r}
down.ind <- mycounts$log2fc < (-2)
sum(down.ind == TRUE)
```

Q10. Do you trust these results? Why or why not?
No, it is based on fold change which can be large without being statistically significant and thus, misleading. 


## DESeq2

```{r}
library(DESeq2)
citation("DESeq2")
```

## Build the DESeqDataSet (dds) object

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)

dds
```

"vst" = variance stabilizing transformation 
intgroup tells R to code based off the groups in the "dex" column 

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

```{r}
# Calculate percent variance per PC for the plot axis labels

percentVar <- round(100*attr(pcaData, "percentVar"))
percentVar
```

```{r}
ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
##res
```

```{r}
res <- as.data.frame(res)
##res
```

```{r}
summary(res)
```


```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # genenames
                     column="SYMBOL",          # new format to add
                     multiVals="first")
head(res)
```

Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

entrez
```{r}
res$entrez <- mapIds(org.Hs.eg.db, 
                     keys=row.names(res),
                     column="ENTREZID", 
                     keytype = "ENSEMBL", 
                     multiVals = "first")
```

uniprot
```{r}
res$uniprot <- mapIds(org.Hs.eg.db, 
                     keys=row.names(res),
                     column="UNIPROT", 
                     keytype = "ENSEMBL", 
                     multiVals = "first")
```

genename
```{r}
res$genename <- mapIds(org.Hs.eg.db, 
                     keys=row.names(res),
                     column="GENENAME", 
                     keytype = "ENSEMBL", 
                     multiVals = "first")
```

```{r}
head(res)
```

```{r}
ord <- order(res$padj)
head(res[ord,])
```

```{r}
plot(res$log2FoldChange, -log(res$padj), 
     xlab = "Log2 Fold-Change", 
     ylab = "-log P-value")

abline(v=c(-2,2), col="red")
abline(h=c(0.05), col="blue")
```


```{r}
mycols <- rep("grey", nrow(res))
##mycols
```


```{r}
mycols[res$log2FoldChange > 2] <- "black"
mycols[res$log2FoldChange < -2] <- "black"
```

```{r}
plot(res$log2FoldChange, -log(res$padj), col=mycols, 
     xlab = "Log2 Fold-Change", 
     ylab = "-log P-value")

abline(v=c(-2,2), col="red")
abline(h=c(0.05), col="blue")
```

```{r}
library(ggrepel)
library(EnhancedVolcano)
```

```{r}
x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
attributes(keggres)
```

```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310", kegg.native=FALSE)
```
